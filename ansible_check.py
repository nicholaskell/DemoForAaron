import os
import subprocess
import tempfile
from openai import OpenAI
import glob
import shutil
from dotenv import load_dotenv
load_dotenv()


# ---------------------
# Configuration Variables
# ---------------------
GITHUB_REPO_URL = "https://github.com/nicholaskell/Ansible_Homelab.git"  # Replace with your repository
SOURCE_BRANCH = "main"            # The branch you want to improve
NEW_BRANCH_NAME = "ai-improved-ansible"
COMMIT_MESSAGE = "AI: Improved Ansible Project Structure and Code"
PR_TITLE = "AI-Driven Ansible Project Improvements"
PR_BODY = "This PR was generated by an AI script that reorganized and improved the Ansible codebase."

# The system message given to the LLM. Adjust as needed.
SYSTEM_MESSAGE = """You are a senior DevOps engineer and Ansible expert.
You are provided with files from an Ansible project (playbooks, inventories, role files, etc.).
Your goal is to improve the project’s structure and code quality. This may include:
- Re-organizing playbooks into well-structured directories.
- Improving YAML formatting and Ansible best practices.
- Suggesting better inventory structure or variable organization.
- Introducing or improving environment variable files (e.g., .env or group_vars).
- Enhancing readability, adding comments, and removing deprecated syntax.
- Adding missing handlers, tasks, or roles if it improves the architecture.
- Generally making the code simpler, clearer, and more maintainable.

If the file needs major changes, rewrite it with a better structure.
If you think additional files (like env or group_vars) would help, describe them at the top of your response before providing improved file content.
If the file is already optimal, just confirm it.

Return the improved file content in YAML (if it's a YAML-based file) or the suggested format.
If you propose new directories or files, list them at the top before providing this file’s improved content.
"""

#openai.api_key = os.environ.get("OPENAI_API_KEY")
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))
#if not openai.api_key:
#    raise ValueError("OPENAI_API_KEY environment variable not set.")

work_dir = tempfile.mkdtemp()
try:
    # Clone the repository
    subprocess.check_call(["git", "clone", GITHUB_REPO_URL, work_dir])
    os.chdir(work_dir)

    # Checkout the source branch
    subprocess.check_call(["git", "checkout", SOURCE_BRANCH])

    # Create and checkout a new branch for improvements
    subprocess.check_call(["git", "checkout", "-b", NEW_BRANCH_NAME])

    # Identify files to improve.
    # Typically Ansible projects have .yml or .yaml for playbooks, roles, and inventories.
    # Adjust the glob pattern as needed to include/exclude certain files.
    ansible_files = glob.glob("**/*.yml", recursive=True) + glob.glob("**/*.yaml", recursive=True)

    # If you have a specific directory structure, you might add more patterns or file types.
    # For example:
    # ansible_files += glob.glob("**/inventory", recursive=True)
    # ansible_files += glob.glob("**/*.env", recursive=True)
    # and so forth, depending on what you want to improve.

    for ansible_file in ansible_files:
        with open(ansible_file, "r", encoding="utf-8") as f:
            original_content = f.read()

        # Call the OpenAI API to improve the file
        response = client.chat.completions.create(model="gpt-4",
            messages=[
                {"role": "system", "content": SYSTEM_MESSAGE},
                {"role": "user", "content": original_content}
            ],
            temperature=0
        )

        improved_content = response.choices[0].message.content.strip()

        # At this point, you have the improved content.
        # If the model suggests new directories or files, it might describe them in its output.
        # Without parsing logic, we simply replace the original file with the improved version.
        with open(ansible_file, "w", encoding="utf-8") as f:
            f.write(improved_content)

    # After processing all files, commit and push changes
    subprocess.check_call(["git", "add", "."])
    subprocess.check_call(["git", "commit", "-m", COMMIT_MESSAGE])
    subprocess.check_call(["git", "push", "-u", "origin", NEW_BRANCH_NAME])

    # Open a Pull Request using GitHub CLI
    subprocess.check_call([
        "gh", "pr", "create",
        "--title", PR_TITLE,
        "--body", PR_BODY,
        "--base", SOURCE_BRANCH
    ])

finally:
    shutil.rmtree(work_dir, ignore_errors=True)
